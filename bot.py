import os
import re
import logging
from typing import Optional, Dict, List
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from youtube_transcript_api import YouTubeTranscriptApi, NoTranscriptFound, TranscriptsDisabled, NoTranscriptAvailable
from youtube_transcript_api.formatters import SRTFormatter
import openai
import signal
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = "logs"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

log_file = os.path.join(log_dir, f"bot_{datetime.now().strftime('%Y%m%d')}.log")
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
logger.info("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")


class OpenAIConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è DEEPSEEK API –∏ OPENAI API"""
    def __init__(self):
        self.api_key: str = os.getenv('DEEPSEEK_API_KEY', os.getenv('OPENAI_API_KEY'))
        self.api_base: str = os.getenv('DEEPSEEK_API_BASE', os.getenv('OPENAI_API_BASE'))
        self.model: str = os.getenv('DEEPSEEK_API_MODEL', os.getenv('OPENAI_API_MODEL'))
        
        if not self.api_key:
            raise ValueError("API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        logger.info(f"API –Ω–∞—Å—Ç—Ä–æ–µ–Ω: endpoint={self.api_base}, model={self.model}")


class HTMLCleaner:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∏"""
    ALLOWED_TAGS = {'b', 'i', 'u', 'strong', 'em', 'code', 'pre'}
    
    @classmethod
    def clean(cls, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ HTML –æ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–µ–≥–æ–≤ Telegram –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–≥–æ–≤"""
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–µ–≥–∏, –∫—Ä–æ–º–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
        pattern = r'</?(?!(?:' + '|'.join(cls.ALLOWED_TAGS) + r')\b)[^>]*>'
        text = re.sub(pattern, '', text)
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏
        opened_tags: List[str] = []
        for match in re.finditer(r'<([a-z]+)[^>]*>', text):
            tag = match.group(1)
            if tag in cls.ALLOWED_TAGS:
                opened_tags.append(tag)
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏
        for match in re.finditer(r'</([a-z]+)>', text):
            tag = match.group(1)
            if tag in cls.ALLOWED_TAGS and opened_tags and opened_tags[-1] == tag:
                opened_tags.pop()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for tag in reversed(opened_tags):
            text += f'</{tag}>'
        
        return text


class YouTubeTranscriberBot:
    """Telegram –±–æ—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ YouTube –≤–∏–¥–µ–æ"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.bot_token: str = os.getenv('TELEGRAM_BOT_TOKEN')
        if not self.bot_token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            
        # –•—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
        self.chat_contexts: Dict[int, str] = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OpenAI
        self.openai_config = OpenAIConfig()
        self.openai_client = openai.AsyncOpenAI(
            api_key=self.openai_config.api_key,
            base_url=self.openai_config.api_base
        )

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
        self.logs_dir = "logs"
        if not os.path.exists(self.logs_dir):
            os.makedirs(self.logs_dir)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        signal.signal(signal.SIGTERM, self._handle_shutdown)
        signal.signal(signal.SIGINT, self._handle_shutdown)
        
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _handle_shutdown(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –∑–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞...")
        sys.exit(0)

    def _log_request(self, user_id: int, username: str, url: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        log_file = os.path.join(self.logs_dir, "requests.log")
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"{timestamp}, User ID: {user_id}, Username: {username}, URL: {url}\n"
        
        with open(log_file, "a", encoding="utf-8") as f:
            f.write(log_entry)
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω: {log_entry.strip()}")

    @staticmethod
    def extract_video_id(url: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –≤–∏–¥–µ–æ –∏–∑ URL"""
        patterns = [
            r'(?:v=|\/)([0-9A-Za-z_-]{11}).*',
            r'(?:youtu\.be\/)([0-9A-Za-z_-]{11})',
        ]
        
        for pattern in patterns:
            match = re.search(pattern, url)
            if match:
                return match.group(1)
        return None

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        await update.message.reply_html(
            f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ, –∏ —è:\n"
            "1. –ò–∑–≤–ª–µ–∫—É —Å—É–±—Ç–∏—Ç—Ä—ã\n"
            "2. –°–¥–µ–ª–∞—é –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ\n"
            "3. –û—Ç–≤–µ—á—É –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤–∏–¥–µ–æ"
        )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message = update.message.text
        chat_id = update.effective_chat.id
        user = update.effective_user
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.id} ({user.username}): {message[:100]}...")

        if "youtube.com" in message or "youtu.be" in message:
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ YouTube —Å—Å—ã–ª–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            await self._process_youtube_link(update, context)
        else:
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            await self._process_question(update, context)

    def _clean_transcript(self, transcript_list: list) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –æ—Ç –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        cleaned_text = []
        
        for item in transcript_list:
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            if 'text' in item:
                text = item['text'].strip()
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–ª—å–∫–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏
                if text and not text.isspace():
                    cleaned_text.append(text)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º
        return ' '.join(cleaned_text)

    async def _process_youtube_link(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube –≤–∏–¥–µ–æ"""
        url = update.message.text
        user = update.effective_user
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            self._log_request(user.id, user.username or "Unknown", url)
            
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ {url} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
            video_id = self.extract_video_id(url)
            
            if not video_id:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –≤–∏–¥–µ–æ –∏–∑ URL: {url}")
                await update.message.reply_html(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ. "
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞."
                )
                return

            await update.message.reply_html("üé¨ <b>–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...</b>")
            
            try:
                transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)
                logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è –≤–∏–¥–µ–æ {video_id}")
                
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä—É—Å—Å–∫–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã
                try:
                    transcript = transcript_list.find_transcript(['ru'])
                    logger.info("–ù–∞–π–¥–µ–Ω—ã —Ä—É—Å—Å–∫–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã")
                except NoTranscriptFound:
                    # –ï—Å–ª–∏ —Ä—É—Å—Å–∫–∏—Ö –Ω–µ—Ç, –±–µ—Ä–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º
                    logger.info("–†—É—Å—Å–∫–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ")
                    transcript = transcript_list.find_transcript(['en'])
                    transcript = transcript.translate('ru')
                    logger.info("–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π")
                
            except (NoTranscriptAvailable, TranscriptsDisabled) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {str(e)}")
                await update.message.reply_html(
                    "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ.</b>\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –°—É–±—Ç–∏—Ç—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã\n"
                    "‚Ä¢ –í–∏–¥–µ–æ –Ω–µ –∏–º–µ–µ—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤\n"
                    "‚Ä¢ –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                )
                return
            
            transcript_text = transcript.fetch()
            # –û—á–∏—â–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –æ—Ç –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            cleaned_transcript = self._clean_transcript(transcript_text)
            logger.info(f"–°—É–±—Ç–∏—Ç—Ä—ã –æ—á–∏—â–µ–Ω—ã, –¥–ª–∏–Ω–∞: {len(cleaned_transcript)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.chat_data['transcript'] = cleaned_transcript
            context.chat_data['video_id'] = video_id
            logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —á–∞—Ç–∞ {update.effective_chat.id}")
            
            logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è")
            summary = await self._generate_summary(cleaned_transcript)
            
            await update.message.reply_html(
                f"üìù <b>–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∏–¥–µ–æ:</b>\n\n{summary}\n\n"
                "ü§î –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é –≤–∏–¥–µ–æ!"
            )
            logger.info("–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            
        except Exception as e:
            error_message = str(e)
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {error_message}")
            await update.message.reply_html(
                "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ.</b>\n"
                f"–î–µ—Ç–∞–ª–∏: {error_message}"
            )

    async def _process_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –≤–∏–¥–µ–æ"""
        try:
            transcript = context.chat_data.get('transcript')
            if not transcript:
                await update.message.reply_html(
                    "‚ùå <b>–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ!</b>"
                )
                return

            question = update.message.text
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: {question[:100]}...")
            
            answer = await self._get_answer(question, transcript)
            await update.message.reply_html(
                f"ü§ñ <b>–û—Ç–≤–µ—Ç:</b>\n\n{answer}"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}", exc_info=True)
            await update.message.reply_html(
                f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b> {str(e)}"
            )

    async def _generate_summary(self, transcript: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —á–µ—Ä–µ–∑ API"""
        logger.info("–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫—Ä–∞—Ç–∫–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è")
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ {self.openai_config.api_base} —Å –º–æ–¥–µ–ª—å—é {self.openai_config.model}")
            response = await self.openai_client.chat.completions.create(
                model=self.openai_config.model,
                messages=[
                    {"role": "system", "content": "–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
                                                "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏–µ HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏ –≤—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–π –∏—Ö): "
                                                "<b>–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <strong>–≤–∞–∂–Ω—ã–π —Ç–µ–∫—Å—Ç</strong>, <em>–≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</em>. "
                                                "–ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –Ω–∏–∫–∞–∫–∏–µ –¥—Ä—É–≥–∏–µ HTML-—Ç–µ–≥–∏ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã."},
                    {"role": "user", "content": f"–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —á–∞—Å—Ç–µ–π:\n\n{transcript}"}
                ]
            )
            summary = response.choices[0].message.content
            cleaned_summary = HTMLCleaner.clean(summary)
            logger.info("–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            return cleaned_summary
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}", exc_info=True)
            if hasattr(e, 'response'):
                logger.error(f"–û—Ç–≤–µ—Ç API: {e.response.text if hasattr(e.response, 'text') else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞'}")
            raise

    async def _get_answer(self, question: str, transcript: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ API"""
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å: {question[:100]}...")
        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ {self.openai_config.api_base} —Å –º–æ–¥–µ–ª—å—é {self.openai_config.model}")
            response = await self.openai_client.chat.completions.create(
                model=self.openai_config.model,
                messages=[
                    {"role": "system", "content": "–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
                                                "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏–µ HTML-—Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏ –≤—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–π –∏—Ö): "
                                                "<b>–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <strong>–≤–∞–∂–Ω—ã–π —Ç–µ–∫—Å—Ç</strong>, <em>–≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</em>. "
                                                "–ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –Ω–∏–∫–∞–∫–∏–µ –¥—Ä—É–≥–∏–µ HTML-—Ç–µ–≥–∏ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã."},
                    {"role": "user", "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç (—Å—É–±—Ç–∏—Ç—Ä—ã –≤–∏–¥–µ–æ):\n{transcript}\n\n–í–æ–ø—Ä–æ—Å: {question}"}
                ]
            )
            answer = response.choices[0].message.content
            cleaned_answer = HTMLCleaner.clean(answer)
            logger.info("–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
            return cleaned_answer
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {str(e)}", exc_info=True)
            if hasattr(e, 'response'):
                logger.error(f"–û—Ç–≤–µ—Ç API: {e.response.text if hasattr(e.response, 'text') else '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞'}")
            raise

    def run(self) -> None:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
        application = Application.builder().token(self.bot_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        application.run_polling()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω")


if __name__ == "__main__":
    bot = YouTubeTranscriberBot()
    bot.run()
